from typing import Generic, Optional, TypeVar, Any

from templatelib import Interval, Linear

__all__ = ['Variable']

T = TypeVar('T', bound=Linear[Any, Any])


class Variable(Generic[T]):
    def __init__(self, value: T, /, uncertainty: Optional[T] = None) -> None:
        '''define a variable with uncertainty. Uncertainty is None
        meaning the value is exact.'''

    @property
    def value(self) -> T: ...
    @property
    def uncertainty(self) -> T | None: ...
    @uncertainty.setter
    def uncertainty(self, uncertainty: Optional[T]) -> None: ...
    @property
    def relative_uncertainty(self) -> T | None: ...
    @relative_uncertainty.setter
    def relative_uncertainty(self, rel_unc: Optional[T]) -> None: ...
    @property
    def confidence_interval(self) -> Interval[T]: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __format__(self, format_spec: str) -> str: ...
    def is_exact(self) -> bool: ...
    def copy(self) -> Variable[T]: ...
    def almost_equal(self, other: Variable[T]) -> bool: ...
    def same_as(self, other: Variable[T]) -> bool: ...
    def __eq__(self, other: Variable[T]) -> bool: ...
    def __ne__(self, other: Variable[T]) -> bool: ...
    def __gt__(self, other: Variable[T]) -> bool: ...
    def __lt__(self, other: Variable[T]) -> bool: ...
    def __ge__(self, other: Variable[T]) -> bool: ...
    def __le__(self, other: Variable[T]) -> bool: ...
    def __pos__(self) -> Variable[T]: ...
    def __neg__(self) -> Variable[T]: ...
    def __add__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __sub__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __mul__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __matmul__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __floordiv__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __truediv__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __pow__(self, other) -> Variable[T]: ...
    def __iadd__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __isub__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __imul__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __imatmul__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __ifloordiv__(self, other: Linear | T |
                      Variable[T]) -> Variable[T]: ...

    def __itruediv__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __ipow__(self, other) -> Variable[T]: ...
    def __radd__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __rsub__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __rmul__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __rmatmul__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __rfloordiv__(self, other: Linear | T |
                      Variable[T]) -> Variable[T]: ...

    def __rtruediv__(self, other: Linear | T | Variable[T]) -> Variable[T]: ...
    def __rpow__(self, other) -> Variable[T]: ...
