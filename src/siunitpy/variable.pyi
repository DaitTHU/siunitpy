from typing import Generic, TypeVar

from .identity import Zero, zero
from .utilcollections import Interval
from .utilcollections.abc import Linear

__all__ = ['Variable']

T = TypeVar('T', bound=Linear)


class Variable(Generic[T]):
    '''`Variable` objects are values of experimental measurements with 
    uncertainties due to measurement limitations (e.g., instrument precision).

    The `uncertainty` can be expressed in a number of ways, like absolute error
    or standard deviation. However, the most general way of characterizing
    uncertainty uncertainty is by specifying its probability distribution.
    '''

    def __init__(self, value: T, /, uncertainty: T | Zero = zero, *,
                 relative_uncertainty: T | Zero = zero) -> None:
        '''construct `Variable` object by giving its value and uncertainty 
        (or relative uncertainty), default zero.

        `uncertainty` and `relative_uncertainty` should not
        be assigned at the same time to avoid conflicts. 
        If so, `relative_uncertainty` would be ignored.
        '''
    @property
    def value(self) -> T: ...
    @value.setter
    def value(self, value: T) -> None: ...
    @property
    def uncertainty(self) -> T | Zero: ...
    @uncertainty.setter
    def uncertainty(self, uncertainty: T | Zero) -> None: ...
    @property
    def relative_uncertainty(self) -> T | Zero: ...
    @relative_uncertainty.setter
    def relative_uncertainty(self, relative_uncertainty: T | Zero) -> None: ...
    @property
    def confidence_interval(self) -> Interval[T]: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __format__(self, format_spec: str) -> str: ...
    def is_exact(self, precision: T | Zero = zero) -> bool: ...
    def copy(self) -> Variable[T]: ...
    def almost_equal(self, other: Variable[T]) -> bool: ...
    def same_as(self, other: Variable[T]) -> bool: ...
    def __eq__(self, other: Variable[T]) -> bool: ...
    def __ne__(self, other: Variable[T]) -> bool: ...
    def __gt__(self, other: Variable[T]) -> bool: ...
    def __lt__(self, other: Variable[T]) -> bool: ...
    def __ge__(self, other: Variable[T]) -> bool: ...
    def __le__(self, other: Variable[T]) -> bool: ...
    def __pos__(self) -> Variable[T]: ...
    def __neg__(self) -> Variable[T]: ...
    def __add__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __sub__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __mul__(self, other: float | T | Variable[T]) -> Variable[T]: ...
    def __matmul__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __floordiv__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __truediv__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __pow__(self, other: float | T | Variable[T]) -> Variable[T]: ...
    def __iadd__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __isub__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __imul__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __imatmul__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __ifloordiv__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __itruediv__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __ipow__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __radd__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __rsub__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __rmul__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __rmatmul__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __rfloordiv__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __rtruediv__(self, other: T | Variable[T]) -> Variable[T]: ...
    def __rpow__(self, other: T | Variable[T]) -> Variable[T]: ...
